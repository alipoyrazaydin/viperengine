const int8 = new Int8Array(1);
class ViperProcessor {
    static s_samplers = {
        array: [function (e, t, s, a, l, i, n, r, h, o, $, p) {
            let c = $?.sampleRate || 8e3;
            for (let u = 0; u < p; ++u) {
                let f = s.call(h, l / i, c, n, h, $);
                e[l % e.length] = (255 & f[0]) / 127 - 1, t[l % t.length] = (255 & f[1]) / 127 - 1, ++l
            }
        }, function (e, t, s, a, l, i, n, r, h, o, $, p) {
            let c = $?.sampleRate || 8e3;
            for (let u = 0; u < p; ++u) {
                let f = s.call(h, l / i, c, n, h, $);
                e[l % e.length] = Number.isNaN(f[0]) ? 0 : f[0], t[l % t.length] = Number.isNaN(f[1]) ? 0 : f[1], ++l
            }
        }, function (e, t, s, a, l, i, n, r, h, o, $, p) {
            let c = $?.sampleRate || 8e3;
            for (let u = 0; u < p; ++u) {
                let f = s.call(h, l / i, c, n, h, $);
                int8[0] = f[0], e[l % e.length] = int8[0] / 128, int8[0] = f[1], t[l % t.length] = int8[0] / 128, ++l
            }
        },],
        twoChannels: [function (e, t, s, a, l, i, n, r, h, o, $, p) {
            let c = $?.sampleRate || 8e3;
            for (let u = 0; u < p; ++u) e[l % e.length] = (255 & s.call(h, l / i, c, n, h, $)) / 127 - 1, t[l % t.length] = (255 & a.call(o, l / i, c, r, o, $)) / 127 - 1, ++l
        }, function (e, t, s, a, l, i, n, r, h, o, $, p) {
            let c = $?.sampleRate || 8e3;
            for (let u = 0; u < p; ++u) {
                let f = s.call(h, l / i, c, n, h, $);
                e[l % e.length] = Number.isNaN(f) ? 0 : f;
                let m = a.call(o, l / i, c, r, o, $);
                t[l % t.length] = Number.isNaN(m) ? 0 : m
            }
        }, function (e, t, s, a, l, i, n, r, h, o, $, p) {
            let c = $?.sampleRate || 8e3;
            for (let u = 0; u < p; ++u) int8[0] = s.call(h, l / i, c, n, h, $), e[l % e.length] = int8[0] / 128, int8[0] = a.call(o, l / i, c, r, o, $), t[l % t.length] = int8[0] / 128, ++l
        },],
        oneChannel: [function (e, t, s, a, l, i, n, r, h, o, $, p) {
            let c = $?.sampleRate || 8e3;
            for (let u = 0; u < p; ++u) e[l % e.length] = (255 & s.call(h, l / i, c, n, h, $)) / 127 - 1, ++l
        }, function (e, t, s, a, l, i, n, r, h, o, $, p) {
            let c = $?.sampleRate || 8e3;
            for (let u = 0; u < p; ++u) {
                let f = s.call(h, l / i, c, n, h, $);
                e[l % e.length] = Number.isNaN(f) ? 0 : f, ++l
            }
        }, function (e, t, s, a, l, i, n, r, h, o, $, p) {
            let c = $?.sampleRate || 8e3;
            for (let u = 0; u < p; ++u) int8[0] = s.call(h, l / i, c, n, h, $), e[l % e.length] = int8[0] / 128, ++l
        },]
    };
    static interpolate(e, t) {
        let s = 0 | t,
            a = e[s % e.length],
            l = e[(s + 1) % e.length];
        return a + (l - a) * (t % 1)
    }
    static trunc(e, t) {
        return e[(0 | t) % e.length]
    }
    constructor() {
        this.stop = true;
        this.buffer0 = new Float32Array(4096), this.buffer1 = new Float32Array(4096), this.desiredSampleRate = 8e3, this.dstSampleCount = 0, this.srcSampleCount = 0, this.expandMode = 0, this.type = 0, this.expressionType = 0, this.functions = [{
            f: function () {
                return 0
            },
            array: !1
        },], this.contexts = [ViperCompiler.makeContext(), ViperCompiler.makeContext()], this.expressions = ["Math.sin(t) * 0.1"], this.extra = ViperCompiler.makeExtra(), this.stacks = [new WrappingStack, new WrappingStack]
    }
    reset() {
        this.dstSampleCount = 0, this.srcSampleCount = 0
    }
    play() {
        this.stopped = false;
    }
    pause() {
        this.stopped = true;
    }
    stop() {
        this.reset(); this.stopped = true;
    }
    setExtra(e) {
        Object.assign(this.extra, e)
    }
    getTime() {
        return this.convertToDesiredSampleRate(this.dstSampleCount)
    }
    recompile() {
        this.setExpressions(this.getExpressions())
    }
    convertToDesiredSampleRate(e) {
        return Math.floor(e * this.desiredSampleRate / this.actualSampleRate)
    }
    setActualSampleRate(e) {
        this.actualSampleRate = e
    }
    setDesiredSampleRate(e) {
        this.desiredSampleRate = e
    }
    getDesiredSampleRate() {
        return this.desiredSampleRate
    }
    setExpressionType(e) {
        this.expressionType = e
    }
    setExpressions(e) {
        this.functions = e.map(e => ViperCompiler.expressionStringToFn(e, {}, !1))
    }
    getExpressionType() {
        return this.expressionType
    }
    setType(e) {
        this.type = e
    }
    getType() {
        return this.type
    }
    getNumChannels() {
        let e = (this.functions[1] || {})
            .f;
        return this.functions[0].array || e ? 2 : 1
    }
    process(e, t, s) {
        if (this.stopped == true) { return; }
        let a = this.convertToDesiredSampleRate(this.dstSampleCount),
            l = this.convertToDesiredSampleRate(this.dstSampleCount + e) + 2,
            i = l - a;
        this.buffer0.length < i && (this.buffer0 = new Float32Array(i), this.buffer1 = new Float32Array(i));
        let n = this.functions[0].f,
            r = this.functions[0].array,
            h = (this.functions[1] || {})
                .f,
            o = this.stacks[0],
            $ = this.stacks[1],
            p = this.contexts[0],
            c = this.contexts[1],
            u = this.buffer0,
            f = r || h ? this.buffer1 : u,
            m = this.extra,
            _ = 3 === this.expressionType ? this.getDesiredSampleRate() : 1,
            d = Math.max(this.srcSampleCount, a),
            S = r ? ViperProcessor.s_samplers.array : h ? ViperProcessor.s_samplers.twoChannels : ViperProcessor.s_samplers.oneChannel,
            g = S[this.type];
        g(u, f, n, h, d, _, o, $, p, c, m, l - d);
        let R = this.dstSampleCount * this.desiredSampleRate / this.actualSampleRate,
            x = this.desiredSampleRate / this.actualSampleRate,
            y = this.expandMode ? ViperProcessor.interpolate : ViperProcessor.trunc;
        if (s)
            for (let C = 0; C < e; ++C) t[C] = y(u, R), s[C] = y(f, R), R += x;
        else {
            let T = 0;
            for (let B = 0; B < e; ++B) t[2 * B] = y(u, T), t[2 * B + 1] = y(f, T), T += x
        }
        this.dstSampleCount += e
    }
    getSampleForTime(e, t, s, a = 0) {
        let l = 3 === this.expressionType ? this.getDesiredSampleRate() : 1,
            i = 0;
        try {
            if (this.functions[0].array) {
                let n = this.functions[0].f(e / l, a, s, t, this.extra);
                i = n[a]
            } else this.functions[1] || (a = 0), i = this.functions[a].f(e / l, a, s, t, this.extra);
            switch (this.type) {
                case 0:
                    return (255 & i) / 127 - 1;
                case 1:
                    return i;
                case 2:
                    return int8[0] = i, int8[0] / 128;
                default:
                    return 0
            }
        } catch (r) {
            return console.error(r), 0
        }
    }
}